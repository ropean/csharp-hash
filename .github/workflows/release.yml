name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag_name:
        description: 'Tag name to create release for'
        required: true
        type: string

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Build and Publish
        run: scripts/build.cmd fd release /p:Version=${{ github.ref_name }}

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          files: |
            ./publish/CSharpHash.exe
          generate_release_notes: true
          fail_on_unmatched_files: true
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN || secrets.GITHUB_TOKEN }}
        continue-on-error: true

      - name: Release Status
        if: steps.create_release.outcome == 'failure'
        run: |
          echo "‚ö†Ô∏è  GitHub release creation failed. This is likely due to token permissions."
          echo "üìù To fix this, you have a few options:"
          echo ""
          echo "1. üîë Use a Personal Access Token (PAT):"
          echo "   - Go to GitHub Settings ‚Üí Developer settings ‚Üí Personal access tokens"
          echo "   - Create a new token with 'repo' permissions"
          echo "   - Add it as a repository secret named 'PAT_TOKEN'"
          echo "   - Update the workflow to use: GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}"
          echo ""
          echo "2. üîß Enable workflows to create releases:"
          echo "   - Go to Repository Settings ‚Üí Actions ‚Üí General"
          echo "   - Under 'Workflow permissions', select 'Read and write permissions'"
          echo ""
          echo "3. üì¶ Manual release creation:"
          echo "   - Download the artifact from this workflow run"
          echo "   - Create a release manually on GitHub with the downloaded file"
          echo ""
          echo "The executable has been successfully built and is available as an artifact."

      - name: Upload Release Asset (if release creation failed)
        if: steps.create_release.outcome == 'failure'
        uses: actions/upload-artifact@v4
        with:
          name: CSharpHash-${{ github.ref_name }}-windows-x64
          path: ./publish/CSharpHash.exe
          retention-days: 30
